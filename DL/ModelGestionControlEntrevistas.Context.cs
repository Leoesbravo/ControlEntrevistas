//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GestionControlEntrevistasEntities : DbContext
    {
        public GestionControlEntrevistasEntities()
            : base("name=GestionControlEntrevistasEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<BolsaTrabajo> BolsaTrabajoes { get; set; }
        public virtual DbSet<Estatu> Estatus { get; set; }
        public virtual DbSet<Filtro> Filtroes { get; set; }
        public virtual DbSet<Generacion> Generacions { get; set; }
        public virtual DbSet<Historico> Historicoes { get; set; }
        public virtual DbSet<Perfil> Perfils { get; set; }
        public virtual DbSet<Recurso> Recursoes { get; set; }
        public virtual DbSet<Proceso> Procesoes { get; set; }
    
        public virtual ObjectResult<ProcesoGetAllByIdRecurso_Result> ProcesoGetAllByIdRecurso(Nullable<int> idRecurso)
        {
            var idRecursoParameter = idRecurso.HasValue ?
                new ObjectParameter("IdRecurso", idRecurso) :
                new ObjectParameter("IdRecurso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcesoGetAllByIdRecurso_Result>("ProcesoGetAllByIdRecurso", idRecursoParameter);
        }
    
        public virtual int ProcesoAdd(Nullable<byte> idEstatus, Nullable<byte> idBolsaTrabajo, string numeroContacto, string empresa, string cliente, string ligaVacante, Nullable<bool> postulado, Nullable<System.DateTime> fechaContacto, Nullable<int> idRecurso)
        {
            var idEstatusParameter = idEstatus.HasValue ?
                new ObjectParameter("IdEstatus", idEstatus) :
                new ObjectParameter("IdEstatus", typeof(byte));
    
            var idBolsaTrabajoParameter = idBolsaTrabajo.HasValue ?
                new ObjectParameter("IdBolsaTrabajo", idBolsaTrabajo) :
                new ObjectParameter("IdBolsaTrabajo", typeof(byte));
    
            var numeroContactoParameter = numeroContacto != null ?
                new ObjectParameter("NumeroContacto", numeroContacto) :
                new ObjectParameter("NumeroContacto", typeof(string));
    
            var empresaParameter = empresa != null ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(string));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            var ligaVacanteParameter = ligaVacante != null ?
                new ObjectParameter("LigaVacante", ligaVacante) :
                new ObjectParameter("LigaVacante", typeof(string));
    
            var postuladoParameter = postulado.HasValue ?
                new ObjectParameter("Postulado", postulado) :
                new ObjectParameter("Postulado", typeof(bool));
    
            var fechaContactoParameter = fechaContacto.HasValue ?
                new ObjectParameter("FechaContacto", fechaContacto) :
                new ObjectParameter("FechaContacto", typeof(System.DateTime));
    
            var idRecursoParameter = idRecurso.HasValue ?
                new ObjectParameter("IdRecurso", idRecurso) :
                new ObjectParameter("IdRecurso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcesoAdd", idEstatusParameter, idBolsaTrabajoParameter, numeroContactoParameter, empresaParameter, clienteParameter, ligaVacanteParameter, postuladoParameter, fechaContactoParameter, idRecursoParameter);
        }
    
        public virtual int ProcesoAddFiltro(Nullable<int> idProceso, Nullable<byte> idFiltro, string detalle)
        {
            var idProcesoParameter = idProceso.HasValue ?
                new ObjectParameter("IdProceso", idProceso) :
                new ObjectParameter("IdProceso", typeof(int));
    
            var idFiltroParameter = idFiltro.HasValue ?
                new ObjectParameter("IdFiltro", idFiltro) :
                new ObjectParameter("IdFiltro", typeof(byte));
    
            var detalleParameter = detalle != null ?
                new ObjectParameter("Detalle", detalle) :
                new ObjectParameter("Detalle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcesoAddFiltro", idProcesoParameter, idFiltroParameter, detalleParameter);
        }
    
        public virtual int ProcesoUpdate(Nullable<byte> idEstatus, Nullable<byte> idBolsaTrabajo, string numeroContacto, string empresa, string cliente, string ligaVacante, Nullable<bool> postulado, Nullable<System.DateTime> fechaContacto, Nullable<int> idRecurso)
        {
            var idEstatusParameter = idEstatus.HasValue ?
                new ObjectParameter("IdEstatus", idEstatus) :
                new ObjectParameter("IdEstatus", typeof(byte));
    
            var idBolsaTrabajoParameter = idBolsaTrabajo.HasValue ?
                new ObjectParameter("IdBolsaTrabajo", idBolsaTrabajo) :
                new ObjectParameter("IdBolsaTrabajo", typeof(byte));
    
            var numeroContactoParameter = numeroContacto != null ?
                new ObjectParameter("NumeroContacto", numeroContacto) :
                new ObjectParameter("NumeroContacto", typeof(string));
    
            var empresaParameter = empresa != null ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(string));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            var ligaVacanteParameter = ligaVacante != null ?
                new ObjectParameter("LigaVacante", ligaVacante) :
                new ObjectParameter("LigaVacante", typeof(string));
    
            var postuladoParameter = postulado.HasValue ?
                new ObjectParameter("Postulado", postulado) :
                new ObjectParameter("Postulado", typeof(bool));
    
            var fechaContactoParameter = fechaContacto.HasValue ?
                new ObjectParameter("FechaContacto", fechaContacto) :
                new ObjectParameter("FechaContacto", typeof(System.DateTime));
    
            var idRecursoParameter = idRecurso.HasValue ?
                new ObjectParameter("IdRecurso", idRecurso) :
                new ObjectParameter("IdRecurso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcesoUpdate", idEstatusParameter, idBolsaTrabajoParameter, numeroContactoParameter, empresaParameter, clienteParameter, ligaVacanteParameter, postuladoParameter, fechaContactoParameter, idRecursoParameter);
        }
    
        public virtual ObjectResult<ProcesoGetById_Result> ProcesoGetById(Nullable<int> idProceso)
        {
            var idProcesoParameter = idProceso.HasValue ?
                new ObjectParameter("IdProceso", idProceso) :
                new ObjectParameter("IdProceso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcesoGetById_Result>("ProcesoGetById", idProcesoParameter);
        }
    }
}
